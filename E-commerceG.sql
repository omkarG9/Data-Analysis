create database ecommerce;

# Q1. List all unique cities where customers are located.
select distinct customer_city from customers;

# Q2. Count the number of customers from each state.
select count(customer_id) as customer, customer_state as customerState from customers
group by customerState;

# Q3. Calculate the number of orders per month in 2018.
select monthname(order_purchase_timestamp) as months, count(order_id) as orders from orders where (order_purchase_timestamp) = 2018 
group by months;

# Q4. Identify the correlation between product price and the number of times a product has been purchased.
select products.product_category , 
count(order_items.product_id),
round(avg(order_items.price),2) 
from products join order_items on
products.product_id = order_items.product_id 
group by products.product_category;

#The two variables have a weak negative correlation, meaning as one variable increases, the other tends to decrease slightly, but the relationship is not strong. Since the value is close to zero, the relationship between these variables is likely not significant or meaningful in a linear sense.

# Q5. Calculate the moving average of order values for each customer over their order history.

select customer_id , order_purchase_timestamp , avg(payment_value) over (partition by customer_id order by order_purchase_timestamp
rows between 2 preceding and current row)
from
(select orders.customer_id , orders.order_purchase_timestamp , payments.payment_value from payments join orders 
on orders.order_id = payments.order_id )  as a;


# Q6. Calculate the cumulative sales per month for each year.
select years, months, payment,sum(payment) over(order by years, months) as cummalative_sales 
from
(select year(orders.order_purchase_timestamp) as years, month(orders.order_purchase_timestamp) as months , 
round(sum(payments.payment_value),2) as payment
from orders join payments
on orders.order_id = payments.order_id 
group by years, months order by years) as a;

# Q7. Calculate the year-over-year growth rate of total sales.
select year(orders.order_purchase_timestamp) as years, round(sum(payments.payment_value),2) as revenue from orders 
join payments 
on orders.order_id = payments.order_id  
group by years;

# Q8. Calculate the percentage of total revenue contributed by each product category.

select product_category as category,
round((sum(payments.payment_value) / (select sum(payment_value) from payments)*100),2) as sales_percentage 
from products join order_items on products.product_id = order_items.product_id   
join payments on payments.order_id = order_items.order_id
group by category order by sales_percentage desc;

# 9. Calculate the total revenue generated by each seller, and rank them by revenue.
select * , rank () over(order by revenue desc) as rn from 
(select order_items.seller_id as seller, round(sum(payments.payment_value),2) as revenue from order_items join payments on
order_items.order_id = payments.order_id
group by seller_id) as a;

# Q10. Find the total sales per category.
select products.product_category as category , round(sum(payments.payment_value),2) as sales from products join order_items on products.product_id = order_items.product_id
join payments on payments.order_id = order_items.order_id  
group by category;

# Q11. Calculate the percentage of orders that were paid in installments.
select (sum(case when payment_installments >= 1 then 1 else 0 end)/count(*)) * 100 from payments;
